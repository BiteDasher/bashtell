#!/bin/bash
if [[ "$1" == -h || "$1" == --help ]]; then
	echo "usage: bashtell [-h] FILE [-l]

    Options:
        -l --load	Load progress
	-h --help	Show this message

bashtell allows you to create simple text novels"
	exit 0
fi
if ! [ -e "$1" ]; then
	echo "File '$1' not found"
	exit 1
fi
savegame() {
	if [[ -z "$prepare" ]]; then
		export savedata="$step-$var"
	fi
}
echosave() {
	echo ''
	echo -n 'SAVE DATA: '
	echo "$savedata" | base64 -w 0
	echo ''
	exit 0
}
gosleep() {
	local __null __plus
	__null=0
	__plus="$1"
	while ((__null < __plus)); do
		echo -n -e '\r     '; sleep 0.1
		echo -n -e '\r  \e[1m.\e[0m'; sleep 0.3
		echo -n -e '\r  \e[1m..\e[0m'; sleep 0.3
		echo -n -e '\r  \e[1m...\e[0m'; sleep 0.3
		((__null++))
	done
	echo -n -e '\r'
}
prompt="$(echo -e "\e[0;34m>\e[0m")"
step=0
var=0
if [[ "$2" == -l || "$2" == --load ]]; then
	read -r -p "Save data: " base64
	base64="$(echo "$base64" | base64 -d)"
	if [ "$?" != 0 ]; then
		echo "invalid save data"
		exit 1
	fi
	step="${base64%-*}"
	var="${base64#*-}"
fi
trap echosave SIGINT
start="$(read -r __start < "$1"; echo "$__start")"
echo "${start#*-}"
echo ''
while :; do
	if [ "$prepare" == 1 ]; then
		var='[[:digit:]]*'
		unset prepare
	fi
	steps="$(grep -o "[*/+?][[:digit:]]*-$step-$var .*" "$1")"
	while read -r line; do
		echo="${line#* }"
	if [ -z "${echo%%@@*}" ]; then
		time="${echo#@@*}"
		time="${time%% *}"
	fi
	if [[ "$time" == [0-9]* ]]; then
		sleep="gosleep $time"
		echo="${echo#* }"
		unset time
	else
		sleep=":"
	fi
	case "$line" in
	'*'*) ques=0
	      $sleep
	      echo="${echo//##/\\n  }"
	      echo -e "\e[0;32m< \e[0m$echo"
	      unlink=1
	      ;;
	'/'*) ques=0
	      $sleep
	      echo="${echo//##/\\n     }"
	      echo -e "\e[0;31m<=== \e[m$echo"
	      exit 0
	      ;;
	'+'*) ques=0
	      $sleep
	      echo="${echo//##/\\n     }"
	      echo -e "\e[0;33m<... \e[0m$echo"
	      prepare=1
	      ;;
	'?'*) prepare=1
	      ques=1
	      alu=${line#*-}
	      alu=${alu#*-}
	      alu=${alu%% *}
	      echo="${echo//##/\\n   }"
	      choice+="$alu: $echo@@"
	      ;;
	esac
	done <<<"$steps"
	if [ "$ques" == 1 ]; then
		bonk="${choice%@@*}"
		bonk="${bonk//@@/\\n}"
		echo -e "$bonk"
		read -r -p "$prompt " ilu
		while [ -z "$(echo -e "$bonk" | grep -x "$ilu: .*")" ]; do
			echo "invalid choice"
			read -r -p "$prompt " ilu
		done
		var="$ilu"
		unset prepare
		unset choice
		echo ''
	fi
	if [ "$unlink" == 1 ]; then
		var=0
		unset unlink
		echo ''
	fi
	line="$(echo "$steps" | tail -n 1)"
 	_step="${line%%-*}"; step="${_step//[?+*\/]/}"
	savegame
done
